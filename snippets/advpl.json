{
	"Protheus doc" : {
			"prefix": "protheusdoc"
		,	"body": [
				"//-------------------------------------------------------------------"
			,	"/*/{Protheus.doc} ${function}"
			,	"${description}"
			,	"@author  ${author}"
			,	"@since   ${date}"
			,	"@version ${version}"
			,	"/*/"
			,	"//-------------------------------------------------------------------"
			]
		,	"description": "Protheus doc"
	},
	
	"If": {
		"prefix": "if",
		"body": [
		"If ${lCond}",
			"\t$1",
		"EndIf"
		],
		"description": "If Statement"
	},
	
	"If Else": {
		"prefix": "ifelse",
		"body": [
		"If ${lCond}",
			"\t$1",
		"Else",
			"\t",
		"EndIf"
		],
		"description": "If Else Statement"
	},

	"If ElseIf": {
		"prefix": "ifelseif",
		"body": [
		"If ${lCond1}",
			"\t$1",
		"ElseIf ${lCond2}",
			"\t",
		"EndIf"
		],
		"description": "If ElseIf Statement"
	},
	
	"While": {
		"prefix": "while",
		"body": [
		"While (${lCond})",
			"\t$1",
		"End"
		],
		"description": "While Statement"
	},

	"For": {
		"prefix": "for",
		"body": [
		"For ${nX}:= 1 to Len(${aArray})",
			"\t$1",
		"Next"
		],
		"description": "For Statement"
	},
	"Query":{
		"prefix": "Query",
		"body":[
			"Local ${cQuery} := ''",
				"${cQuery} := 'query'",
				"${cQuery} := ChangeQuery(${cQuery})",
				"dbUseArea(.T.,'TOPCONN', TCGenQry(,,${cQuery}),alias, .F., .T.)",
				"While alias->(!Eof())",
					"\talias->(dbSkip())",
				"EndDo",
				"alias->(dbCloseArea())"
		],
		"description": "Cria a funcï¿½o de Query ja efetuando a conexa£o com o TOP e efetuando o While"
	},
    "Help":{
        "prefix": "Help",
        "body":[
			 
              "HELP(' ',1,${cabecalho} ,,${descricao},2,0,,,,,, ${solucao})"
        ],
        "description":"Funa§a£o de Help\nExemplo\nHELP(' ',1,'Help1' ,,'campo nao preenchido',2,0,,,,,, {'preencha o campo'})"
    },
	"Static Function":{
		"prefix": "StaticFunction",
		"body":[
			"/*/{Protheus.doc} ${nomeStaticFunction}",
			"	(long_description)",
			"	@type  Static Function",
			"	@author ${user}",
			"	@since ${date}",
			"	@version ${version}",
			"	@param ${param}, ${param_type}, ${param_descr}",
			"	@return ${returno},${return_type}, ${return_description}",
			"	@example",
			"	(examples)",
			"	@see (links_or_references)",
			"	/*/",
			" Static Function ${nomeStaticFunction}",
			"Return ${returno}"


		],
		"description": "Declaraa§a£o de uma Static Function ja com o Protheus.doc"
		
	},
	"Function":{
		"prefix": "Function",
		"body":[
			"/*/{Protheus.doc} ${nomeFunction}",
			"	(long_description)",
			"	@type  Function",
			"	@author ${user}",
			"	@since ${date}",
			"	@version ${version}",
			"	@param ${param}, ${param_type}, ${param_descr}",
			"	@return ${returno},${return_type}, ${return_description}",
			"	@example",
			"	(examples)",
			"	@see (links_or_references)",
			"	/*/",
			" Function ${nomeFunction}",
			"Return ${returno}"


		],
	},
	 "Strtokarr2": {
        "prefix": "Strtokarr2",
        "body": [
            "Strtokarr2( ${cValue}, ${cToken}, ${lEmptyStr})"
        ],
        "description": "Strtokarr2- Transforma uma String em um array,\n cValue := Caracter a ser separado\n cToken := Caracter a ser ultilizado na quebra \n lEmptyStr:= Se retorna elementos vazios" 					
	 },
	 "Year": {
        "prefix": "Year",
        "body": [
            "Year( ${dData})"
        ],
        "description": "Year - Retorna o Ano no formato 'AAAA' da data informada"
    },
	 "Type": {
        "prefix": "Type",
        "body": [
            "Type( ${cVariavel})"
        ],
        "description": "Type() - Retorna o tipo de dado de uma expressao ou variavel."
    },
	 "ValType": {
        "prefix": "ValType",
        "body": [
            "ValType( ${cVariavel})"
        ],
        "description":  "Valtype() - Retorna o tipo de dado de uma expressao ou variavel."						
	 },
	 "ComputerName": {
        "prefix": "ComputerName",
        "body": [
            "ComputerName()"
        ],
        "description": "ComputerName() - Retorna o nome do computador em que o SmartClient esta sendo executado"
    },
	"ConOut": {
        "prefix": "ConOut",
        "body": [
            "ConOut( ${cText})"
        ],
        "description": "ConOut() - Apresenta no console, do Application Server, uma mensagem."
	},
	"Decode64": {
        "prefix": "Decode64",
        "body": [
            "Decode64( ${cText})"
        ],
        "description": "Decode64() - Converte uma string de Base64 para Base ASCII"
    },
	"Encode64": {
        "prefix": "Encode64",
        "body": [
            "Encode64( ${cText})"
        ],
        "description": "Encode64() - Converte uma string de ASCII para base64"
    },
	 "FindFunction": {
        "prefix": "FindFunction",
        "body": [
            "FindFunction( ${cFunction})"
        ],
        "description": "FindFunction() - Faz a busca de uma determinada funcï¿½o no rpo ou no bina¡rio"
	 },

	 "Class": {
		"prefix": "class",
		"body": [
			"/*/{Protheus.doc} $1",
				"\t(long_description)",
				"\t@type  Class",
				"\t@author ${user}",
				"\t@since ${date}",
				"\t@version ${version}",
				"\t@example",
				"\t(examples)",
				"\t@see (links_or_references)",
			"/*/",
			"Class $1 ",
				"\t",
				"\tData $2 ",
				"\t",
				"\tMethod $1() Constructor ",
				"\tMethod ",
				"\t",
			"EndClass",
			"",
			"Method New() Class $1",
			"Return self"
		],
		"description": "Estrutura basica de uma classe ADVPL"
	},

	"Class from": {
		"prefix": "class from",
		"body": [
			"/*/{Protheus.doc} $1",
				"\t(long_description)",
				"\t@type  Class",
				"\t@author ${user}",
				"\t@since ${date}",
				"\t@version ${version}",
				"\t@example",
				"\t(examples)",
				"\t@see (links_or_references)",
			"/*/",
			"Class $1 from $2",
				"\t",
				"\tData $3 ",
				"\t",
				"\tMethod New() Constructor ",
				"\tMethod ",
				"\t",
			"EndClass",
			"",
			"Method $1() Class $1",
			"Return self"
		],
		"description": "Estrutura de uma classe ADVPL com heranca"
	},

	"Constructor Method": {
		"prefix": "constructor",
		"body": [
			"Method $1() Class $1",
			"Return self"
		],
		"description": "Estrutura basica de um construtor ADVPL"
	},

	"Data declaration": {
		"prefix": "Data",
		"body": [
			"Data $1 as $2"
		],
		"description": "Declara uma nova propriedade"
	},

	"Method declaration": {
		"prefix": "method",
		"body": [
			"Method $1()"
		],
		"description": "Declara um novo metodo"
	},

	"Constructor declaration": {
		"prefix": "constructor",
		"body": [
			"Method $1() Constructor"
		],
		"description": "Declara um novo construtor"
	},

	"Method": {
		"prefix": "method",
		"body": [
			"/*/{Protheus.doc} ${nomeMetodo}",
				"\t(long_description)",
				"\t@type  Method",
				"\t@author ${user}",
				"\t@since ${date}",
				"\t@version ${version}",
				"\t@param ${param}, ${param_type}, ${param_descr}",
				"\t@return ${returno},${return_type}, ${return_description}",
				"\t@example",
				"\t(examples)",
				"\t@see (links_or_references)",
			"/*/",
			"Method $1() Class $2",
			"\t",
			"Return"
		],
		"description": "Estrutura basica de um metodo ADVPL"
	},
	"Method setter": {
		"prefix": "setter",
		"body": [
			"/*/{Protheus.doc} set$1",
				"\t(long_description)",
				"\t@type  Method",
				"\t@author ${user}",
				"\t@since ${date}",
				"\t@version ${version}",
				"\t@param ${param}, ${param_type}, ${param_descr}",
				"\t@return ${returno},${return_type}, ${return_description}",
				"\t@example",
				"\t(examples)",
				"\t@see (links_or_references)",
			"/*/",
			"Method set$1($1) Class $2 ",
				"\tself:$1 := $1",
			"Return"
		],
		"description": "Metodo setter ADVPL"
	},
	"Cria um novo metodo getter": {
		"prefix": "getter",
		"body": [
			"/*/{Protheus.doc} get$1",
				"\t(long_description)",
				"\t@type  Method",
				"\t@author ${user}",
				"\t@since ${date}",
				"\t@version ${version}",
				"\t@param ${param}, ${param_type}, ${param_descr}",
				"\t@return ${returno},${return_type}, ${return_description}",
				"\t@example",
				"\t(examples)",
				"\t@see (links_or_references)",
			"/*/",
			"Method get$1() Class $2 ",
			"Return self:$1"
		],
		"description": "Metodo getter ADVPL"
	}

}
