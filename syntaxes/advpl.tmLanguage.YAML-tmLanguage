$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: ADVPL
patterns:
    -
        include: '#diretivas-compilador'
    -
        include: '#tipos'
    -
        include: '#comentario'
    -
        include: '#estruturas-de-controle'
    -
        include: '#comandos'
    -
        include: '#declaracoes'
    -
        include: '#expressao'
repository:
    diretivas-compilador:
        patterns:
            -
                name: keyword.control.advpl
                match: '(?i)#\b(define|endif|ifn?def|include|x?command|x?translate)\b'
    comandos:
        patterns:
            -
                name: keyword.operator.crlf.advpl
                match: '(?i)\b(CRLF)\b'
            -
                name: meta.beginsql.advpl
                begin: '(?i)\b(beginsql)\s+(alias)(\s+\w+)?'
                beginCaptures:
                    '1': {name: keyword.control.beginsql.advpl}
                    '2': {name: keyword.control.alias.advpl}
                    '3': {name: variable.parameter.advpl}
                end: '(?i)endsql'
                endCaptures:
                    '0': {name: keyword.control.endsql.advpl}
                patterns:
                    - {include: '#comentario'}
                    - {include: '#tipo-caracter'}
                    - {name: storage.modifier.advpl, match: '%.*?%'}
                    - {name: variable.parameter.sqlquery.advpl, match: \b(\w+)\b}
    tipos:
        patterns:
            -
                include: '#tipo-logico'
            -
                include: '#tipo-numero'
            -
                include: '#tipo-caracter'
            -
                include: '#tipo-bloco'
            -
                include: '#tipo-array'
            -
                include: '#tipo-objeto'
            -
                include: '#tipo-campo'
            -
                include: '#declaracao-wsstruct'
    declaracoes:
        patterns:
            -
                include: '#declaracao-funcao'
            -
                include: '#declaracao-classe'
            -
                include: '#declaracao-metodo'
            -
                include: '#declaracao-wsmethod'
            -
                include: '#declaracao-wsservice-wsclient-wsrestful'
            -
                include: '#declaracao-variavel'
    tipo-logico:
        patterns:
            -
                name: constant.language.boolean.true.advpl
                match: '(?i)\.t\.'
            -
                name: constant.language.boolean.false.advpl
                match: '(?i)\.f\.'
            -
                name: constant.language.null.advpl
                match: '(?i)\bnil\b'
            -
                name: constant.language.boolean.operator.and.advpl
                match: '(?i)\.and\.'
            -
                name: constant.language.boolean.operator.or.advpl
                match: '(?i)\.or\.'
            -
                name: constant.language.boolean.operator.not.advpl
                match: '(?i)\.not\.'
    tipo-numero:
        patterns:
            -
                match: "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)"
                captures:
                    '0': {name: constant.numeric.decimal.advpl}
                    '1': {name: meta.delimiter.decimal.period.advpl}
                    '2': {name: meta.delimiter.decimal.period.advpl}
                    '3': {name: meta.delimiter.decimal.period.advpl}
                    '4': {name: meta.delimiter.decimal.period.advpl}
                    '5': {name: meta.delimiter.decimal.period.advpl}
                    '6': {name: meta.delimiter.decimal.period.advpl}
    tipo-caracter:
        patterns:
            -
                name: string.quoted.double.advpl
                match: '("[^"]*"?)'
            -
                name: string.quoted.double.advpl
                match: '(''[^'']*''?)'
    tipo-objeto:
        patterns:
            -
                match: '(?i)\b(self|_super)'
                name: keyword.class.advpl
            -
                include: '#chamada-metodo'
            -
                match: '((?:::|:)\b\w+)\b(?!:\w)'
                name: variable.parameter.advpl
            -
                match: '((?:::|:)\b\w+)\b'
                name: entity.name.type.object.advpl
                comment: variable.parameter.advpl
            -
                match: '\b(\w+)\b(?=:)(?!:=)'
                name: entity.name.type.object.advpl
    tipo-array:
        name: meta.array.literal.advpl
        begin: '\{'
        beginCaptures:
            '0':
                name: meta.brace.decl.advpl
        end: '\}'
        endCaptures:
            '0':
                name: meta.brace.decl.advpl
        patterns:
            -
                include: '#comentario'
            -
                include: '#expressao'
            -
                include: '#virgula'
    tipo-bloco:
        name: meta.codeblock.literal.advpl
        begin: '\{\s*(?=(\|.*\|))'
        beginCaptures:
            '0':
                name: meta.brace.decl.advpl
        end: '\s*\}'
        endCaptures:
            '0':
                name: meta.brace.decl.advpl
        patterns:
            -
                include: '#comentario'
            -
                include: '#expressao'
            -
                include: '#virgula'
    tipo-campo:
        patterns:
            -
                match: '####'
                name: meta.field.advpl
                comment: '\b(?:(?:\(?([A-Z0-9]{2,3})\)?(->))?([A-Z0-9]{2,3})_([A-Z0-9_]{1,7}))|(?:(\(?\w+\)?)(->)(\w+))\b'
                captures:
                    '1': {name: meta.alias.name.advpl}
                    '2': {name: keyword.operator.alias.advpl}
                    '3': {name: meta.table.name.advpl}
                    '4': {name: meta.field.name.advpl}
                    '5': {name: meta.alias.name.advpl}
                    '6': {name: keyword.operator.alias.advpl}
                    '7': {name: meta.field.name.advpl}
    comentario:
        patterns:
            -
                name: comment.block.advpl
                begin: '/\*'
                end: '\*/'
                captures:
                    '0': {name: punctuation.definition.comment.advpl}
            -
                begin: '(^[ \t]+)?(?=//)'
                beginCaptures:
                    '1': {name: punctuation.whitespace.comment.leading.advpl}
                end: '(?=$)'
                patterns:
                    - {name: comment.line.double-slash.advpl, begin: //, beginCaptures: {'0': {name: punctuation.definition.comment.advpl}}, end: '(?=$)'}
    estruturas-de-controle:
        patterns:
            -
                name: keyword.control.ws.flow.advpl
                match: '(?i)\b(begin|end)\b\s+\b(wsmethod)\b'
            -
                name: keyword.control.sequence.flow.advpl
                match: '(?i)\b(begin|end)\b\s+\b(sequence)\b'
            -
                name: keyword.control.transaction.flow.advpl
                match: '(?i)\b(begin|end)\b\s+\b(transaction)\b'
            -
                name: keyword.control.flow.advpl
                match: '(?i)\b(break|return)\b(?!\$)'
            -
                name: keyword.control.loop.advpl
                match: '(?i)\b(for|next|to|exit|loop|continue|goto|while|end|enddo)\b(?!\$)'
            -
                name: keyword.control.switch.advpl
                match: '(?i)\b(do|case|otherwise|endcase)\b(?!\$)'
            -
                name: keyword.control.conditional.advpl
                match: '(?i)\b(else(if)?|i?if|endif)\b(?!\$)'
    operadores:
        patterns:
            -
                name: keyword.operator.assignment.compound.advpl
                match: '\*=|(?<!\()/=|%=|\+=|\-='
            -
                name: keyword.operator.comparison.advpl
                match: '==|!='
            -
                name: keyword.operator.relational.advpl
                match: '<=|>=|<>|<|>'
            -
                name: keyword.operator.logical.advpl
                match: \!|\.and\.|\.or\.
            -
                name: keyword.operator.assignment.advpl
                match: ':\='
            -
                name: keyword.operator.decrement.advpl
                match: '--'
            -
                name: keyword.operator.increment.advpl
                match: \+\+
            -
                name: keyword.operator.arithmetic.advpl
                match: '%|\*|/|-|\+'
    declaracao-variavel:
        name: meta.declaration.advpl
        begin: '(?i)^\s*\b(local|static|private|public|default)\b\s+(\w+)(?:\s+(as)\s+(array|block|codeblock|character|char|date|logical|numeric|object))?'
        beginCaptures:
            '1': {name: storage.modifier.advpl}
            '3': {name: keyword.control.as.advpl}
            '4': {name: storage.type.advpl}
        end: '(?=$)'
        patterns:
            -
                include: '#comentario'
            -
                include: '#expressao'
    data:
        patterns:
            -
                match: '(?i)\b((?:ws)?data)\s+(\w+)(?:\s+(as)\s+(array of\s+)?(?:(string|date|integer|float|boolean)|(\w+))\s*)?(optional)?'
                captures:
                    '1': {name: storage.modifier.advpl}
                    '2': {name: variable.object.property.advpl}
                    '3': {name: keyword.control.as.advpl}
                    '4': {name: keyword.control.arrayof.advpl}
                    '5': {name: storage.type.advpl}
                    '6': {name: entity.name.type.class.advpl}
                    '7': {name: keyword.control.optional.advpl}
    expressao:
        name: meta.expression.advpl
        patterns:
            -
                include: '#comentario'
            -
                include: '#tipos'
            -
                include: '#operadores'
            -
                include: '#chamada-funcao'
            -
                include: '#expressao-alias'
            -
                include: '#expressao-parenteses'
            -
                include: '#virgula'
    chamada-metodo:
        begin: '((?:::|:)\w+)(?=\()'
        beginCaptures:
            '1':
                name: entity.name.function.advpl
        end: '(?<=\))'
        patterns:
            -
                include: '#comentario'
            -
                include: '#expressao-parenteses'
    chamada-funcao:
        begin: '(\w+)(?=\()'
        beginCaptures:
            '1':
                name: entity.name.function.advpl
        end: '(?<=\))'
        patterns:
            -
                include: '#comentario'
            -
                include: '#expressao-parenteses'
    declaracao-funcao:
        name: meta.function.advpl
        begin: '(?i)^\s*(?:(html|main|project|pyme|static|template|user|web|webuser)\s+)?(function)\s+(\w+)'
        beginCaptures:
            '1':
                name: storage.modifier.advpl
            '2':
                name: storage.type.function.advpl
            '3':
                name: entity.name.function.advpl
        end: '(?<=\)|\s)(?:(?i)\s+(as)\s+(array|block|codeblock|character|char|date|logical|numeric|object))?'
        endCaptures:
                    '1': {name: keyword.control.as.advpl}
                    '2': {name: storage.type.advpl}
        patterns:
            -
                include: '#function-parameters'
            -
                include: '#expressao'
    declaracao-classe:
        name: meta.class.advpl
        begin: '(?i)^\s*(class)\s+(\w+)(?:(?:\s+(inherit(?:\sfrom)|from|of)\s+(\w+)))?'
        beginCaptures:
            '1':
                name: storage.type.class.advpl
            '2':
                name: entity.name.type.class.advpl
            '3':
                name: storage.type.class.advpl
            '4':
                name: entity.name.type.class.advpl
        end: '(?i)(end\s*class)'
        endCaptures:
            '1':
                name: storage.type.class.advpl
        patterns:
            -
                include: '#comentario'
            -
                include: '#declaracao-metodo'
            -
                name: storage.type.constructor.advpl
                match: '(?i)\b(constructor)\b'
            -
                include: '#data'
    declaracao-metodo:
        begin: '(?i)^\s*(method)\s+(\w+)\s*(?=\()'
        beginCaptures:
            '1':
                name: storage.type.method.advpl
            '2':
                name: entity.name.function.advpl
        end: '(?i)(?<=\))(?:\s+(class)\s+(\w+))?(?:\s+(as)\s+(array|block|codeblock|character|char|date|logical|numeric|object))?'
        endCaptures:
            '1':
                name: storage.type.class.advpl
            '2':
                name: entity.name.type.class.advpl
            '3':
                name: keyword.control.as.advpl
            '4':
                name: storage.type.advpl
        patterns:
            -
                include: '#function-parameters'
    function-parameters:
        name: meta.parameters.advpl
        begin: '\s*\('
        beginCaptures:
            '0':
                name: punctuation.definition.parameters.begin.advpl
        end: \)
        endCaptures:
            '0':
                name: punctuation.definition.parameters.end.advpl
        patterns:
            -
                include: '#comentario'
            -
                include: '#nome-parametro'
            -
                include: '#tipo-dado'
            -
                include: '#virgula'
    declaracao-wsstruct:
        name: meta.struct.literal.advpl
        begin: '(?i)^\s*(wsstruct)\s+(\w+)'
        beginCaptures:
            '1':
                name: storage.type.struct.advpl
            '2':
                name: entity.name.type.object.advpl
        end: '(?i)^\s*(endwsstruct)'
        endCaptures:
            '1':
                name: storage.type.struct.advpl
        patterns:
            -
                include: '#comentario'
            -
                include: '#data'
            -
                match: '(?i)(wsmethod)\s+(\w+)(\s+description)?'
                captures:
                    '1': {name: storage.type.method.advpl}
                    '2': {name: entity.name.function.advpl}
                    '3': {name: keyword.control.struct.advpl}
    declaracao-wsservice-wsclient-wsrestful:
        name: meta.ws.literal.advpl
        begin: '(?i)^\s*(?<!wsmethod)(wsservice|wsclient|wsrestful)\s+(\w+)(\s+description)?'
        beginCaptures:
            '1':
                name: storage.type.ws.advpl
            '2':
                name: entity.name.type.ws.advpl
            '3':
                name: keyword.control.ws.advpl
        end: '(?i)^\s*(endwsservice|endwsclient|endwsrestful|end\s*wsrestful)'
        endCaptures:
            '1':
                name: storage.type.ws.advpl
        patterns:
            -
                include: '#comentario'
            -
                include: '#tipo-caracter'
            -
                include: '#data'
            -
                match: '(?i)(wsmethod)\s+(\w+)(\s+description)?'
                captures:
                    '1': {name: storage.type.method.advpl}
                    '2': {name: entity.name.function.advpl}
                    '3': {name: keyword.control.ws.advpl}
    declaracao-wsmethod:
        begin: '(?i)^\s*(wsmethod)\s+(\w+)'
        beginCaptures:
            '1':
                name: storage.type.method.advpl
            '2':
                name: entity.name.function.advpl
        end: '(?i)(wsservice|wsclient|wsrestful|wsrest)\s+(\w+)'
        endCaptures:
            '1':
                name: storage.type.ws.advpl
            '2':
                name: entity.name.type.class.advpl
        patterns:
            -
                match: '(?i)(wssend|wsreceive)'
                name: storage.type.parameter.advpl
            -
                match: '(\w+)'
                name: variable.parameter.advpl
            -
                include: '#virgula'
    expressao-alias:
        begin: '####'
        coment: ' desabilitado (\(?)(\w+)(\)?)(->)(\()'
        beginCaptures:
            '1':
                name: meta.brace.round.advpl
            '2':
                name: meta.alias.name.advpl
            '3':
                name: meta.brace.round.advpl
            '4':
                name: keyword.operator.alias.advpl
            '5':
                name: meta.brace.round.advpl
        end: \)
        endCaptures:
            '0':
                name: meta.brace.round.advpl
        patterns:
            -
                include: '#expressao'
            -
                include: '#virgula'
    expressao-parenteses:
        begin: \(
        beginCaptures:
            '0':
                name: meta.brace.round.advpl
        end: \)
        endCaptures:
            '0':
                name: meta.brace.round.advpl
        patterns:
            -
                include: '#expressao'
            -
                include: '#virgula'
    nome-parametro:
        patterns:
            -
                name: variable.parameter.advpl
                match: '(\w+)'
    tipo-dado:
        patterns:
            -
                match: '(?i)\s+(as)\s+(array|block|codeblock|character|char|date|logical|numeric|object)'
                captures:
                    '1': {name: keyword.control.as.advpl}
                    '2': {name: storage.type.advpl}
    virgula:
        patterns:
            -
                name: punctuation.separator.comma.advpl
                match: ','
scopeName: source.advpl
